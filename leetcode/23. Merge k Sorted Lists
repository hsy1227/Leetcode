#include <iostream> 
using namespace std;

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
        ListNode *ans;
        int n=lists.size();
        while(n>1){
            int k=(n+1)/2;
            for(int i=0;i<n/2;i++){
                lists[i]=mergelist(lists[i],lists[i+k]);
            }
            n=k;
        }
        return lists[0];
        
    }
    ListNode* mergelist(ListNode* a,ListNode* b){
        ListNode *d=new ListNode(-1),*cur=d;
        while(a && b){
            if(a->val < b->val){
                cur->next=a;
                a=a->next;
            }else{
                cur->next=b;
                b=b->next;
            }
            cur=cur->next;
        }
        if(a) cur->next=a;
        if(b) cur->next=b;
        return d->next;
    }


};
